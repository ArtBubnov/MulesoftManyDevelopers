#this scenario will be executed in case of creation of a Pull Request creation
name: run munits on PR logic

#depends on the target branch one of the Pull Request:
on:
  pull_request:
    #PR target branch is: 
    branches:
      - 'dev**'
    #will be triggered in cese of Pull Request creation, reopen or additional push
    types: [opened, reopened, synchronize]


jobs:
  dev:
    runs-on: ubuntu-latest
    #in the env section below variables for mulesoft project pom file for the following sections should be defined:
    #1. build --> plugin (org.mule.tools.maven) --> cloudHubDeployment
    #2. build --> plugin (org.mule.tools.maven) --> cloudHubDeployment --> properties 
    env:
      #POM <cloudHubDeployment>
      PLATFORM_USERNAME: ${{ secrets.PLATFORM_USERNAME_GITHUB_SECRET_VALUE }}
      PLATFORM_PASSWORD: ${{ secrets.PLATFORM_PASSWORD_GITHUB_SECRET_VALUE }}
      ENV: DEV
      WORKERS: ${{ vars.WORKERS_GITHUB_VALUE }}
      WORKERS_TYPE: ${{ vars.WORKERS_TYPE_GITHUB_VALUE }}
      OBJECT_STORE_V2: ${{ vars.OBJECT_STORE_V2_GITHUB_VALUE }}
      REGION: ${{ vars.REGION_GITHUB_VALUE }}
      BUSINESS_GROUP_ID: ${{ secrets.BUSINESS_GROUP_ID }}
      URI: ${{ vars.URI }}

    steps:
      #This action checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout repository
        uses: actions/checkout@v2

      #This step performs:
      # 1. add new dependencies in cache
      # 2. retrieve existing data from cache

      - name: Checking Cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven- 

      #This step runs munit tests
      #All the tests will be captured from the source branch of the Pull Request
      - name: DEV. Run Mulesoft Munit tests
        run:  mvn clean test "-DskipMunitBoolean=false"